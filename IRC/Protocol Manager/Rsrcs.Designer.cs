//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BestChat.IRC.ProtocolMgr {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Rsrcs {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Rsrcs() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("BestChat.IRC.ProtocolMgr.Rsrcs", typeof(Rsrcs).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _BNC Manager.
        /// </summary>
        internal static string strFileBncMgrMenuItemTitle {
            get {
                return ResourceManager.GetString("strFileBncMgrMenuItemTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Displays the BNC Manager.  From here, you can customize how Best Chat handles bouncers..
        /// </summary>
        internal static string strFileBncMgrMenuItemToolTip {
            get {
                return ResourceManager.GetString("strFileBncMgrMenuItemToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to I_RC.
        /// </summary>
        internal static string strFileMenuItemTitle {
            get {
                return ResourceManager.GetString("strFileMenuItemTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Holds all menu items for the IRC system in Best Chat.
        /// </summary>
        internal static string strFileMenuItemToolTip {
            get {
                return ResourceManager.GetString("strFileMenuItemToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _Network Manager.
        /// </summary>
        internal static string strFileNetworkMgrMenuItemTitle {
            get {
                return ResourceManager.GetString("strFileNetworkMgrMenuItemTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Displays the Network Manager.  From here, you can add, remove, or customize IRC networks available through out the rest of Best Chat..
        /// </summary>
        internal static string strFileNetworkMgrMenuItemToolTip {
            get {
                return ResourceManager.GetString("strFileNetworkMgrMenuItemToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MIRC.
        /// </summary>
        internal static string strFmtMarkerTypeMIRC {
            get {
                return ResourceManager.GetString("strFmtMarkerTypeMIRC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When you use the UI to select formatting other than color, Best Chat will insert into the text control characters you won&apos;t be able to see.  Some clients will see these and trigger the formatting..
        /// </summary>
        internal static string strFmtMarkerTypeMircToolTip {
            get {
                return ResourceManager.GetString("strFmtMarkerTypeMircToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Traditional.
        /// </summary>
        internal static string strFmtMarkerTypeTraditional {
            get {
                return ResourceManager.GetString("strFmtMarkerTypeTraditional", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When you use the UI to select formatting other than color, Best Chat will insert into the text ASCII formatting marks.  So if you want &quot;text&quot; in bold and use the UI rather than typing, you&apos;ll get &quot;*text*&quot;..
        /// </summary>
        internal static string strFmtMarkerTypeTraditonalToolTip {
            get {
                return ResourceManager.GetString("strFmtMarkerTypeTraditonalToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If you check this, Best Chat will respond to formatting marks for bold.  This applies to both types of bold marks.  Best Chat might receive bold marks in just ASCII (you&apos;ll see asterisks in the text) or hidden control characters.  You wouldn&apos;t see anything..
        /// </summary>
        internal static string strPrefsGlobalFmtBoldDesc {
            get {
                return ResourceManager.GetString("strPrefsGlobalFmtBoldDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Bold.
        /// </summary>
        internal static string strPrefsGlobalFmtBoldTitle {
            get {
                return ResourceManager.GetString("strPrefsGlobalFmtBoldTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Lets you specify how things should be formatted..
        /// </summary>
        internal static string strPrefsGlobalFmtDesc {
            get {
                return ResourceManager.GetString("strPrefsGlobalFmtDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If you check this, Best Chat wil respond to formatting marks for italics.  This applies to both types of italics marks.  Best Chat might receive italic marks in just ASCII (you&apos;ll see slashes in the text or as MIRC control characters in which case you&apos;d see nothing..
        /// </summary>
        internal static string strPrefsGlobalFmtItalicsDesc {
            get {
                return ResourceManager.GetString("strPrefsGlobalFmtItalicsDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Italics.
        /// </summary>
        internal static string strPrefsGlobalFmtItalicsTitle {
            get {
                return ResourceManager.GetString("strPrefsGlobalFmtItalicsTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Controls how Best Chat sends formatting other than colors when you rely on the UI to specify that formatting instead of typing it directly..
        /// </summary>
        internal static string strPrefsGlobalFmtMarkerTypeDesc {
            get {
                return ResourceManager.GetString("strPrefsGlobalFmtMarkerTypeDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Outgoing Marker Type.
        /// </summary>
        internal static string strPrefsGlobalFmtMarkerTypeTitle {
            get {
                return ResourceManager.GetString("strPrefsGlobalFmtMarkerTypeTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If checked, Best Chat responds to color codes hidden in the text.  This cooressponds to the color button on the formatting toolbar.  You can also change the color with % values by typing a % followed by a number.  Use one of the following formats: &quot;%foreground&quot;, &quot;%,background&quot;, or &quot;%foreground,background&quot;.  The comma is needed to specify a background color.  Best Chat will show these codes in the editor, but not the channel.  Note: Some channels don&apos;t like colors and either refuse the message or strip out t [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string strPrefsGlobalFmtMircColorsDesc {
            get {
                return ResourceManager.GetString("strPrefsGlobalFmtMircColorsDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MIRC Colors.
        /// </summary>
        internal static string strPrefsGlobalFmtMircColorsTitle {
            get {
                return ResourceManager.GetString("strPrefsGlobalFmtMircColorsTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If you check this, Best Chat wil respond to formatting marks for strike through.  There&apos;s no IRC convention for this, so Best Chat treats text surrounded by tildes as strike through.  So you&apos;d see &quot;~text~&quot;.  The default for this preference is false as support may be limited..
        /// </summary>
        internal static string strPrefsGlobalFmtStrikeThroughDesc {
            get {
                return ResourceManager.GetString("strPrefsGlobalFmtStrikeThroughDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Strike Through.
        /// </summary>
        internal static string strPrefsGlobalFmtStrikeThroughTitle {
            get {
                return ResourceManager.GetString("strPrefsGlobalFmtStrikeThroughTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If checked, Best Chat switches to a fixed width font selected by your theme or the global preferences if you override it there.  Normally, it might use a variable pitch (width) font..
        /// </summary>
        internal static string strPrefsGlobalFmtTeleTypeDesc {
            get {
                return ResourceManager.GetString("strPrefsGlobalFmtTeleTypeDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Teletype.
        /// </summary>
        internal static string strPrefsGlobalFmtTeleTypeTitle {
            get {
                return ResourceManager.GetString("strPrefsGlobalFmtTeleTypeTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Format.
        /// </summary>
        internal static string strPrefsGlobalFmtTitle {
            get {
                return ResourceManager.GetString("strPrefsGlobalFmtTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If you check this, Best Chat wil respond to formatting marks for underline.  This applies to both types of underline marks.  Best Chat might receive underline marks in just ASCII (you&apos;ll see underlines in the text or as MIRC control characters in which case you&apos;d see nothing..
        /// </summary>
        internal static string strPrefsGlobalFmtUnderlineDesc {
            get {
                return ResourceManager.GetString("strPrefsGlobalFmtUnderlineDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Underline.
        /// </summary>
        internal static string strPrefsGlobalFmtUnderlineTitle {
            get {
                return ResourceManager.GetString("strPrefsGlobalFmtUnderlineTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Implements the Internet Relay Chat protocol for Best Chat.  Without this module, Best Chat doesn&apos;t support IRC..
        /// </summary>
        internal static string strTranslatedProtDesc {
            get {
                return ResourceManager.GetString("strTranslatedProtDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Internet Relay Chat (IRC).
        /// </summary>
        internal static string strTranslatedProtName {
            get {
                return ResourceManager.GetString("strTranslatedProtName", resourceCulture);
            }
        }
    }
}
