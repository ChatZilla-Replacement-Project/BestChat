//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BestChat.Platform.UI.Desktop {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Rsrcs {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Rsrcs() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("BestChat.Platform.UI.Desktop.Rsrcs", typeof(Rsrcs).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Please locate the file.
        /// </summary>
        internal static string strDefFileBrowserTitle {
            get {
                return ResourceManager.GetString("strDefFileBrowserTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Please locate the folder.
        /// </summary>
        internal static string strDefFolderBrowserTitle {
            get {
                return ResourceManager.GetString("strDefFolderBrowserTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Animate All Emoji.
        /// </summary>
        internal static string strEmojiAnimateEndlessly {
            get {
                return ResourceManager.GetString("strEmojiAnimateEndlessly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Causes all emoji to be animated endlessly.  Your theme will choose the animation..
        /// </summary>
        internal static string strEmojiAnimateEndlesslyToolTip {
            get {
                return ResourceManager.GetString("strEmojiAnimateEndlesslyToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Limit Emoji Animation.
        /// </summary>
        internal static string strEmojiAnimateLimit {
            get {
                return ResourceManager.GetString("strEmojiAnimateLimit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This is a cross between the other two.  The emoji will animate, but stop after a couple loops through the animation.  Your theme selects the animation..
        /// </summary>
        internal static string strEmojiAnimateLimitToolTip {
            get {
                return ResourceManager.GetString("strEmojiAnimateLimitToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Never Animate Emoji.
        /// </summary>
        internal static string strEmojiAnimateNever {
            get {
                return ResourceManager.GetString("strEmojiAnimateNever", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Selecting this will prevent animated emoji.  Some people find them distracting..
        /// </summary>
        internal static string strEmojiAnimateNeverToolTip {
            get {
                return ResourceManager.GetString("strEmojiAnimateNeverToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Display as plain text emoticons.
        /// </summary>
        internal static string strEmojiDisplayingAsEmoticons {
            get {
                return ResourceManager.GetString("strEmojiDisplayingAsEmoticons", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If you select this, Best Chat will display any emoji you receive as though you received plain text emoji.  Regardless, you&apos;ll be about to hover your mouse over the emoticon shown and see what actually arrived and how to send that emoji back..
        /// </summary>
        internal static string strEmojiDisplayingAsEmoticonsToolTiop {
            get {
                return ResourceManager.GetString("strEmojiDisplayingAsEmoticonsToolTiop", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Leave Alone.
        /// </summary>
        internal static string strEmojiDisplayingLeaveAlone {
            get {
                return ResourceManager.GetString("strEmojiDisplayingLeaveAlone", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If you select this, Best Chat will display any emoji as received.  Regardless, you&apos;ll be able to move your mouse over the emoji to see what was actually received and what you can enter to get the same emoji..
        /// </summary>
        internal static string strEmojiDisplayingLeaveAloneToolTip {
            get {
                return ResourceManager.GetString("strEmojiDisplayingLeaveAloneToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Convert to emotions.
        /// </summary>
        internal static string strEmojiSendingConvertToEmoticons {
            get {
                return ResourceManager.GetString("strEmojiSendingConvertToEmoticons", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Best Chat will convert emoji you enter into emoticons.  This is safer as not all clients can correctly handle emoji..
        /// </summary>
        internal static string strEmojiSendingConvertToEmoticonsToolTip {
            get {
                return ResourceManager.GetString("strEmojiSendingConvertToEmoticonsToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Leave Alone.
        /// </summary>
        internal static string strEmojiSendingLeaveAlone {
            get {
                return ResourceManager.GetString("strEmojiSendingLeaveAlone", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Best Chat will send any emoji you enter as is.  Emoji might not be handled correctly by some clients..
        /// </summary>
        internal static string strEmojiSendingLeaveAloneToolTip {
            get {
                return ResourceManager.GetString("strEmojiSendingLeaveAloneToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Causes Best Chat to act as though an emoji were sent instead of an emoticon.  Hover your mouse over the emoji to see what was actually sent and how to sent that emoji back.  The emoji dipslay option can allow that emoji to be animated in which case your theme chooses the animation..
        /// </summary>
        internal static string strEmoticonDisplayingAsEmojiToolTip {
            get {
                return ResourceManager.GetString("strEmoticonDisplayingAsEmojiToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Display as Emoji.
        /// </summary>
        internal static string strEmoticonDisplayingDisplayAsEmoji {
            get {
                return ResourceManager.GetString("strEmoticonDisplayingDisplayAsEmoji", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Leave Alone.
        /// </summary>
        internal static string strEmoticonDisplayingLeaveAlone {
            get {
                return ResourceManager.GetString("strEmoticonDisplayingLeaveAlone", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If you select this, Best Chat will never convert emoticons into emoji for you.  However, if you hover over the emoticon, you&apos;ll see a graphical depiction of it.  Depending on the emoji display option below, your theme will select an animation to play..
        /// </summary>
        internal static string strEmoticonDisplayingLeaveAloneToolTip {
            get {
                return ResourceManager.GetString("strEmoticonDisplayingLeaveAloneToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Convert to Emoji.
        /// </summary>
        internal static string strEmoticonSendingConvertToEmoji {
            get {
                return ResourceManager.GetString("strEmoticonSendingConvertToEmoji", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Causes Best Chat to send out the emoticons you type as emoji..
        /// </summary>
        internal static string strEmoticonSendingConvertToEmojiToolTip {
            get {
                return ResourceManager.GetString("strEmoticonSendingConvertToEmojiToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Leave Alone.
        /// </summary>
        internal static string strEmoticonSendingLeaveAlone {
            get {
                return ResourceManager.GetString("strEmoticonSendingLeaveAlone", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Not all clients handle emoji correctly.  This option ensure emoticons go out as plain ASCII which they should be able to handle just fine..
        /// </summary>
        internal static string strEmoticonSendingLeaveAloneToolTip {
            get {
                return ResourceManager.GetString("strEmoticonSendingLeaveAloneToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Bold.
        /// </summary>
        internal static string strFontWeightBold {
            get {
                return ResourceManager.GetString("strFontWeightBold", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Demi Bold.
        /// </summary>
        internal static string strFontWeightDemiBold {
            get {
                return ResourceManager.GetString("strFontWeightDemiBold", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Extra Black.
        /// </summary>
        internal static string strFontWeightExtraBlack {
            get {
                return ResourceManager.GetString("strFontWeightExtraBlack", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Extra Bold.
        /// </summary>
        internal static string strFontWeightExtraBold {
            get {
                return ResourceManager.GetString("strFontWeightExtraBold", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Extra Light.
        /// </summary>
        internal static string strFontWeightExtraLight {
            get {
                return ResourceManager.GetString("strFontWeightExtraLight", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Heavy.
        /// </summary>
        internal static string strFontWeightHeavy {
            get {
                return ResourceManager.GetString("strFontWeightHeavy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Light.
        /// </summary>
        internal static string strFontWeightLight {
            get {
                return ResourceManager.GetString("strFontWeightLight", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Medium.
        /// </summary>
        internal static string strFontWeightMedium {
            get {
                return ResourceManager.GetString("strFontWeightMedium", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Normal.
        /// </summary>
        internal static string strFontWeightNormal {
            get {
                return ResourceManager.GetString("strFontWeightNormal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Thin.
        /// </summary>
        internal static string strFontWeightThin {
            get {
                return ResourceManager.GetString("strFontWeightThin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Continuously.
        /// </summary>
        internal static string strGifAnimationContinuously {
            get {
                return ResourceManager.GetString("strGifAnimationContinuously", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Plays the GIF animation endlessly..
        /// </summary>
        internal static string strGifAnimationContinuouslyToolTip {
            get {
                return ResourceManager.GetString("strGifAnimationContinuouslyToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Never.
        /// </summary>
        internal static string strGifAnimationNever {
            get {
                return ResourceManager.GetString("strGifAnimationNever", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Prevents GIFs from being animated.  This has no effect on any other animations.  However, an option below starts the animation if you mouse over the object..
        /// </summary>
        internal static string strGifAnimationNeverToolTip {
            get {
                return ResourceManager.GetString("strGifAnimationNeverToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Once.
        /// </summary>
        internal static string strGifAnimationOnce {
            get {
                return ResourceManager.GetString("strGifAnimationOnce", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Plays the GIF animation once, but only once..
        /// </summary>
        internal static string strGifAnimationOnceToolTip {
            get {
                return ResourceManager.GetString("strGifAnimationOnceToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Twice.
        /// </summary>
        internal static string strGifAnimationTwice {
            get {
                return ResourceManager.GetString("strGifAnimationTwice", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Plays the GIF animation twice and then stops the animation..
        /// </summary>
        internal static string strGifAnimationTwiceToolTip {
            get {
                return ResourceManager.GetString("strGifAnimationTwiceToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Since many protocols have avatars that can be in GIF format and hence animated, Best Chat makes this a separate preference.  If you choose an option that allows limited animation (once or twice), only the latest posts should animate their avatar..
        /// </summary>
        internal static string strGlobalAppearanceAnimationAvatarsDesc {
            get {
                return ResourceManager.GetString("strGlobalAppearanceAnimationAvatarsDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Avatars (can be GIFs).
        /// </summary>
        internal static string strGlobalAppearanceAnimationAvatarsTitle {
            get {
                return ResourceManager.GetString("strGlobalAppearanceAnimationAvatarsTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Global location for how to control animations.  Use this to tell protocols that can tranfer images how animated images should be handled.  Not supported by all protocols.  There&apos;s a second option below to control if the animation starts or resumes when you mouse over the image or video..
        /// </summary>
        internal static string strGlobalAppearanceAnimationDesc {
            get {
                return ResourceManager.GetString("strGlobalAppearanceAnimationDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to GIF is a format dating to the 1990s created by CompuServe that allows animation.  It&apos;s limited to 256 colors, but still popular for animations.  In some protocols, they can be rather distracting, but important part of memes..
        /// </summary>
        internal static string strGlobalAppearanceAnimationGifDesc {
            get {
                return ResourceManager.GetString("strGlobalAppearanceAnimationGifDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to GIF (Graphical Interchange Format).
        /// </summary>
        internal static string strGlobalAppearanceAnimationGifTitle {
            get {
                return ResourceManager.GetString("strGlobalAppearanceAnimationGifTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If checked, animation will resume, or start, when you mouse over an object that can be animated.  Otherwise, you&apos;d have to press a play button.  (The play button isn&apos;t shown for avatars.).
        /// </summary>
        internal static string strGlobalAppearanceAnimationResumeOnMouseOverDesc {
            get {
                return ResourceManager.GetString("strGlobalAppearanceAnimationResumeOnMouseOverDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Resume on Mouse Over.
        /// </summary>
        internal static string strGlobalAppearanceAnimationResumeOnMouseOverTitle {
            get {
                return ResourceManager.GetString("strGlobalAppearanceAnimationResumeOnMouseOverTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Animation.
        /// </summary>
        internal static string strGlobalAppearanceAnimationTitle {
            get {
                return ResourceManager.GetString("strGlobalAppearanceAnimationTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If checked, Best Chat will display control characters..
        /// </summary>
        internal static string strGlobalAppearanceDisplayCtrlCharsDesc {
            get {
                return ResourceManager.GetString("strGlobalAppearanceDisplayCtrlCharsDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Display Control Characters.
        /// </summary>
        internal static string strGlobalAppearanceDisplayCtrlCharsTitle {
            get {
                return ResourceManager.GetString("strGlobalAppearanceDisplayCtrlCharsTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use to enable or disable animation of emoji.  This is regardless of they arrive as emoji or emoticons.  Emoji or emoticons you send are also included.  Your theme selects the actual animation used if you enable it..
        /// </summary>
        internal static string strGlobalAppearanceEmojiAnimationDesc {
            get {
                return ResourceManager.GetString("strGlobalAppearanceEmojiAnimationDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Allow or Disable Animation of Emoji?.
        /// </summary>
        internal static string strGlobalAppearanceEmojiAnimationTitle {
            get {
                return ResourceManager.GetString("strGlobalAppearanceEmojiAnimationTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This is where you configure how Best Chat handles emoji and emoticons..
        /// </summary>
        internal static string strGlobalAppearanceEmojiDesc {
            get {
                return ResourceManager.GetString("strGlobalAppearanceEmojiDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When Best Chat displays an emoji, it can leave it as is or show the equivalent emoticon instead..
        /// </summary>
        internal static string strGlobalAppearanceEmojiDisplayingDesc {
            get {
                return ResourceManager.GetString("strGlobalAppearanceEmojiDisplayingDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to What to do when displaying emoji.
        /// </summary>
        internal static string strGlobalAppearanceEmojiDisplayingTitle {
            get {
                return ResourceManager.GetString("strGlobalAppearanceEmojiDisplayingTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to These choices affect what to do when you enter an emoji.  Do you want to send it as is?  If you pasted it from somewhere or used an emoji character, you might actually prefer plain ASCII emoticons..  Note: Many emoji can&apos;t be represented in ASCII.  Those emoji will still be sent as emoji..
        /// </summary>
        internal static string strGlobalAppearanceEmojiSendingDesc {
            get {
                return ResourceManager.GetString("strGlobalAppearanceEmojiSendingDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to What to do when sending emoji?.
        /// </summary>
        internal static string strGlobalAppearanceEmojiSendingTitle {
            get {
                return ResourceManager.GetString("strGlobalAppearanceEmojiSendingTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Emoji.
        /// </summary>
        internal static string strGlobalAppearanceEmojiTitle {
            get {
                return ResourceManager.GetString("strGlobalAppearanceEmojiTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When Best Chat displays an emoticon, it can display the raw emoticon or show the equivilant emoji instead.  In the latter case, the display option below affects if the emoji is animated.  Such animations are selected by your theme..
        /// </summary>
        internal static string strGlobalAppearanceEmoticonsDisplayDesc {
            get {
                return ResourceManager.GetString("strGlobalAppearanceEmoticonsDisplayDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to What to do when displaying emoticons.
        /// </summary>
        internal static string strGlobalAppearanceEmoticonsDisplayTitle {
            get {
                return ResourceManager.GetString("strGlobalAppearanceEmoticonsDisplayTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Same as above, but for when you enter emoticons.  You can have Best Chat replace those with emoji.  Sometimes, the emoticons, especially the older ones, are fater to type.
        /// </summary>
        internal static string strGlobalAppearanceEmoticonsSendingDesc {
            get {
                return ResourceManager.GetString("strGlobalAppearanceEmoticonsSendingDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to What to do when sending emoticons?.
        /// </summary>
        internal static string strGlobalAppearanceEmoticonsSendingTitle {
            get {
                return ResourceManager.GetString("strGlobalAppearanceEmoticonsSendingTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If checked, Best Chat will break up long words on syllable boundaries with hyphens.  Otherwise, it will require a space.  Turning this off can cause lines to be rather short if really long words are present..
        /// </summary>
        internal static string strGlobalAppearanceHyphenateLongWordsDesc {
            get {
                return ResourceManager.GetString("strGlobalAppearanceHyphenateLongWordsDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Hyphenate Long Words.
        /// </summary>
        internal static string strGlobalAppearanceHyphenateLongWordsTitle {
            get {
                return ResourceManager.GetString("strGlobalAppearanceHyphenateLongWordsTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If checked, posts or messages that contain only emoji as displayed are shown with a bigger font.  This also affects animated emoji and includes what arrived as emoticons, but are being shown as emoji.  It has no effect on anything displayed as an emoji..
        /// </summary>
        internal static string strGlobalAppearanceMakeEmojiOnlyPostsBiggerDesc {
            get {
                return ResourceManager.GetString("strGlobalAppearanceMakeEmojiOnlyPostsBiggerDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Make Posts With Only Emoji Bigger.
        /// </summary>
        internal static string strGlobalAppearanceMakeEmojiOnlyPostsBiggerTitle {
            get {
                return ResourceManager.GetString("strGlobalAppearanceMakeEmojiOnlyPostsBiggerTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If checked, Best Chat will recognize links in plain text including to channels, rooms, servers/networks, web pages, and email addresses.  It will then display those links as something you can click on.  If unchecked, that won&apos;t happen.  Note: Some protocols mark links.  This setting has no effect on them..
        /// </summary>
        internal static string strGlobalAppearanceRecognizeLinksDesc {
            get {
                return ResourceManager.GetString("strGlobalAppearanceRecognizeLinksDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Recognize links.
        /// </summary>
        internal static string strGlobalAppearanceRecognizeLinksTitle {
            get {
                return ResourceManager.GetString("strGlobalAppearanceRecognizeLinksTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If checked, Best Chat will convert conventional quote characters into typographical quotes.  Protocols shouldn&apos;t apply this to preformatted blocks.  Typographical quotes can make the text easier to read.  This affects only what&apos;s shown.  What you send is handled in the Composition page..
        /// </summary>
        internal static string strGlobalAppearanceUseTypographicalQuotesDesc {
            get {
                return ResourceManager.GetString("strGlobalAppearanceUseTypographicalQuotesDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use Typographical Quotes.
        /// </summary>
        internal static string strGlobalAppearanceUseTypographicalQuotesTitle {
            get {
                return ResourceManager.GetString("strGlobalAppearanceUseTypographicalQuotesTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Contains various settings that control how Best Chat interprets what you type..
        /// </summary>
        internal static string strGlobalCompositionDesc {
            get {
                return ResourceManager.GetString("strGlobalCompositionDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If checked, you&apos;ll be able to type a string beginning with with a backslash (&quot;\&quot;) to open a menu for emoji.  This picker may be easier than the one that comes with your OS and cooresponds to what clients for Discord and Matrix include.  The menu that appears will filter out those that don&apos;t match what you type..
        /// </summary>
        internal static string strGlobalCompositionEnableEmojiShortCutsDesc {
            get {
                return ResourceManager.GetString("strGlobalCompositionEnableEmojiShortCutsDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enable Emoji Short Cuts.
        /// </summary>
        internal static string strGlobalCompositionEnableEmojiShortCutsTitle {
            get {
                return ResourceManager.GetString("strGlobalCompositionEnableEmojiShortCutsTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If checked, you can enter any HTML entity including the ampersand (&quot;&amp;&quot;) to send that character.  If you know those entities, you may find using this easier than using your OS&apos;s character picker.  Typing the ampersand will, if this option is enabled, open a menu listing the best match..
        /// </summary>
        internal static string strGlobalCompositionEnableEntityShortCutsDesc {
            get {
                return ResourceManager.GetString("strGlobalCompositionEnableEntityShortCutsDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enable Entity Short Cuts.
        /// </summary>
        internal static string strGlobalCompositionEnableEntityShortCutsTitle {
            get {
                return ResourceManager.GetString("strGlobalCompositionEnableEntityShortCutsTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Composition.
        /// </summary>
        internal static string strGlobalCompositionTitle {
            get {
                return ResourceManager.GetString("strGlobalCompositionTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If checked, you&apos;ll be able to send a MDash (&quot;—&quot;) by typing two consecutive dashes.  So use &quot;--&quot;.  If you uncheck this, you&apos;ll need your file picker..
        /// </summary>
        internal static string strGlobalCompositionTreatDblDashAsMDashDesc {
            get {
                return ResourceManager.GetString("strGlobalCompositionTreatDblDashAsMDashDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Treat a double dash as an MDash (&quot;—&quot;).
        /// </summary>
        internal static string strGlobalCompositionTreatDblDashAsMDashTitle {
            get {
                return ResourceManager.GetString("strGlobalCompositionTreatDblDashAsMDashTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If checked, you&apos;ll be able to type three periods (&quot;...&quot;) but get an ellipsis (&quot;…&quot;)..
        /// </summary>
        internal static string strGlobalCompositionTreatThreePeriodsAsEllipsisDesc {
            get {
                return ResourceManager.GetString("strGlobalCompositionTreatThreePeriodsAsEllipsisDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Treat three periods as an ellipsis (&quot;…&quot;).
        /// </summary>
        internal static string strGlobalCompositionTreatThreePeriodsAsEllipsisTitle {
            get {
                return ResourceManager.GetString("strGlobalCompositionTreatThreePeriodsAsEllipsisTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If checked, when you type quotes that aren&apos;t in preformatted blocks, Best Chat will replace those with typographical quotes.  So &quot;he&apos;s&quot; gets replaced with &quot;he’s&quot;.  Depending on the language, this might not work properly..
        /// </summary>
        internal static string strGlobalCompositionUseTypographicalQuotesDesc {
            get {
                return ResourceManager.GetString("strGlobalCompositionUseTypographicalQuotesDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use Typographical Quotes.
        /// </summary>
        internal static string strGlobalCompositionUseTypographicalQuotesTitle {
            get {
                return ResourceManager.GetString("strGlobalCompositionUseTypographicalQuotesTitle", resourceCulture);
            }
        }
    }
}
