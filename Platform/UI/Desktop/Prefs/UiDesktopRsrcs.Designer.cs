//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BestChat.Platform.UI.Desktop.Prefs {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class UiDesktopRsrcs {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal UiDesktopRsrcs() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("BestChat.Platform.UI.Desktop.Prefs.UiDesktopRsrcs", typeof(UiDesktopRsrcs).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to alias.
        /// </summary>
        internal static string strAliasText {
            get {
                return ResourceManager.GetString("strAliasText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Best Chat has exited..
        /// </summary>
        internal static string strDefQuitMsg {
            get {
                return ResourceManager.GetString("strDefQuitMsg", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Bold.
        /// </summary>
        internal static string strFontWeightBold {
            get {
                return ResourceManager.GetString("strFontWeightBold", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Demi-Bold/Semi-Bold.
        /// </summary>
        internal static string strFontWeightDemiBold {
            get {
                return ResourceManager.GetString("strFontWeightDemiBold", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Extra-Black/Ultra-Black.
        /// </summary>
        internal static string strFontWeightExtraBlack {
            get {
                return ResourceManager.GetString("strFontWeightExtraBlack", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Extra-Bold/Ultra-Bold.
        /// </summary>
        internal static string strFontWeightExtraBold {
            get {
                return ResourceManager.GetString("strFontWeightExtraBold", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Extra Light/Ultra Light.
        /// </summary>
        internal static string strFontWeightExtraLight {
            get {
                return ResourceManager.GetString("strFontWeightExtraLight", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Black/Heavy.
        /// </summary>
        internal static string strFontWeightHeavy {
            get {
                return ResourceManager.GetString("strFontWeightHeavy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Light.
        /// </summary>
        internal static string strFontWeightLight {
            get {
                return ResourceManager.GetString("strFontWeightLight", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Medium.
        /// </summary>
        internal static string strFontWeightMedium {
            get {
                return ResourceManager.GetString("strFontWeightMedium", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Normal/Regular.
        /// </summary>
        internal static string strFontWeightNormal {
            get {
                return ResourceManager.GetString("strFontWeightNormal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Thin.
        /// </summary>
        internal static string strFontWeightThin {
            get {
                return ResourceManager.GetString("strFontWeightThin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to These fonts are used by the main window, the preference window, and anywhere else that isn&apos;t a view provided by a protocol..
        /// </summary>
        internal static string strGlboalAppearanceAppFontsDesc {
            get {
                return ResourceManager.GetString("strGlboalAppearanceAppFontsDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Lists custom command sets you can run as one..
        /// </summary>
        internal static string strGlobalAliasesDesc {
            get {
                return ResourceManager.GetString("strGlobalAliasesDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Aliases.
        /// </summary>
        internal static string strGlobalAliasesTitle {
            get {
                return ResourceManager.GetString("strGlobalAliasesTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enter any alternate nicks that Best Chat should use if your normal nick isn&apos;t available.  You don&apos;t need to include your default nick..
        /// </summary>
        internal static string strGlobalAltNicksDesc {
            get {
                return ResourceManager.GetString("strGlobalAltNicksDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Alterate Nicks.
        /// </summary>
        internal static string strGlobalAltNicksTitle {
            get {
                return ResourceManager.GetString("strGlobalAltNicksTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fonts for the Application&apos;s main windows.
        /// </summary>
        internal static string strGlobalAppearanceAppFontsTitle {
            get {
                return ResourceManager.GetString("strGlobalAppearanceAppFontsTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to These fonts are used only inside views provided by a protocol implementation.  Some may override or ignore these settings.  They may also add additional settings as some will support more format information..
        /// </summary>
        internal static string strGlobalAppearanceCLientFontsDesc {
            get {
                return ResourceManager.GetString("strGlobalAppearanceCLientFontsDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fonts for views provided by a protocol..
        /// </summary>
        internal static string strGlobalAppearanceClientFontsTitle {
            get {
                return ResourceManager.GetString("strGlobalAppearanceClientFontsTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Best Chat uses this font when it needs a fixed width font.  Note: Emoji characters may force Best Chat to switch to another font as most fonts don&apos;t include the emoji characters.  Furthermore, if you choose to use graphical emoji, those will almost certainly be a different width..
        /// </summary>
        internal static string strGlobalAppearanceFixedWidthFontFamilyDesc {
            get {
                return ResourceManager.GetString("strGlobalAppearanceFixedWidthFontFamilyDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fixed Width Font Family.
        /// </summary>
        internal static string strGlobalAppearanceFixedWidthFontFamilyTitle {
            get {
                return ResourceManager.GetString("strGlobalAppearanceFixedWidthFontFamilyTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Check this to override the theme and uncheck it to allow the theme&apos;s selection to take affect..
        /// </summary>
        internal static string strGlobalAppearanceFontBlockPairIsOverriddenDesc {
            get {
                return ResourceManager.GetString("strGlobalAppearanceFontBlockPairIsOverriddenDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Is Overriden.
        /// </summary>
        internal static string strGlobalAppearanceFontBlockPairIsOverriddenTitle {
            get {
                return ResourceManager.GetString("strGlobalAppearanceFontBlockPairIsOverriddenTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value you chose.
        /// </summary>
        internal static string strGlobalAppearanceFontBlockPairOverriddenValDesc {
            get {
                return ResourceManager.GetString("strGlobalAppearanceFontBlockPairOverriddenValDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value you chose.
        /// </summary>
        internal static string strGlobalAppearanceFontBlockPairOverriddenValTitle {
            get {
                return ResourceManager.GetString("strGlobalAppearanceFontBlockPairOverriddenValTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Your chosen theme specified a series of fonts to use.  However, you can override the font selections the application..
        /// </summary>
        internal static string strGlobalAppearanceFontDesc {
            get {
                return ResourceManager.GetString("strGlobalAppearanceFontDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specify the size of the font used.  This affects the size of both the normal and fixed width fonts you (or your theme) use..
        /// </summary>
        internal static string strGlobalAppearanceFontSizeDesc {
            get {
                return ResourceManager.GetString("strGlobalAppearanceFontSizeDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Size of the fonts used.
        /// </summary>
        internal static string strGlobalAppearanceFontSizeTitle {
            get {
                return ResourceManager.GetString("strGlobalAppearanceFontSizeTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fonts.
        /// </summary>
        internal static string strGlobalAppearanceFontTitle {
            get {
                return ResourceManager.GetString("strGlobalAppearanceFontTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specify the weight or boldness of the fonts used.  This affects the weight of both the normal and fixed width fonts.  Note: In your client views, you may find incoming posts causing text to be bolder than what you specifiy here..
        /// </summary>
        internal static string strGlobalAppearanceFontWeightDesc {
            get {
                return ResourceManager.GetString("strGlobalAppearanceFontWeightDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Weight (boldness) of the fonts used.
        /// </summary>
        internal static string strGlobalAppearanceFontWeightTitle {
            get {
                return ResourceManager.GetString("strGlobalAppearanceFontWeightTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This is the font family used when Best Chat doesn&apos;t require a fixed width font..
        /// </summary>
        internal static string strGlobalAppearanceNormalFontFamilyDesc {
            get {
                return ResourceManager.GetString("strGlobalAppearanceNormalFontFamilyDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Normal Font Family.
        /// </summary>
        internal static string strGlobalAppearanceNormalFontFamilyTitle {
            get {
                return ResourceManager.GetString("strGlobalAppearanceNormalFontFamilyTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Places the user list on the left side of the client area..
        /// </summary>
        internal static string strGlobalAppearanceUserListLeftDesc {
            get {
                return ResourceManager.GetString("strGlobalAppearanceUserListLeftDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Left.
        /// </summary>
        internal static string strGlobalAppearanceUserListLeftTitle {
            get {
                return ResourceManager.GetString("strGlobalAppearanceUserListLeftTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specify if you want the user list on the left or right..
        /// </summary>
        internal static string strGlobalAppearanceUserListLocDesc {
            get {
                return ResourceManager.GetString("strGlobalAppearanceUserListLocDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Location.
        /// </summary>
        internal static string strGlobalAppearanceUserListLocTitle {
            get {
                return ResourceManager.GetString("strGlobalAppearanceUserListLocTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Places the user list on the right side of the client area..
        /// </summary>
        internal static string strGlobalAppearanceUserListRightDesc {
            get {
                return ResourceManager.GetString("strGlobalAppearanceUserListRightDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Right.
        /// </summary>
        internal static string strGlobalAppearanceUserListRightTitle {
            get {
                return ResourceManager.GetString("strGlobalAppearanceUserListRightTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Controls how the user list is sorted or leaves it unsorted..
        /// </summary>
        internal static string strGlobalAppearanceUserListSortByModeDesc {
            get {
                return ResourceManager.GetString("strGlobalAppearanceUserListSortByModeDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sort By Mode.
        /// </summary>
        internal static string strGlobalAppearanceUserListSortByModeTitle {
            get {
                return ResourceManager.GetString("strGlobalAppearanceUserListSortByModeTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to How recently the user did something and then their nick or display name.
        /// </summary>
        internal static string strGlobalAppearanceUserListSortOrderLocalActivityThenName {
            get {
                return ResourceManager.GetString("strGlobalAppearanceUserListSortOrderLocalActivityThenName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sorts the user list by how recently they‘ve been active in that channel or room and then by their nick or display name.
        /// </summary>
        internal static string strGlobalAppearanceUserListSortOrderLocalActivityThenNameToolTip {
            get {
                return ResourceManager.GetString("strGlobalAppearanceUserListSortOrderLocalActivityThenNameToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to User‘s mode, then how recently the user was active, then by their nick or display name.
        /// </summary>
        internal static string strGlobalAppearanceUserListSortOrderModeThenLocalActivityThenName {
            get {
                return ResourceManager.GetString("strGlobalAppearanceUserListSortOrderModeThenLocalActivityThenName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sorts the user list by the user&apos;s mode first, then how recently in this channel or room they were active, then by their nick or display name.
        /// </summary>
        internal static string strGlobalAppearanceUserListSortOrderModeThenLocalActivityThenNameToolTip {
            get {
                return ResourceManager.GetString("strGlobalAppearanceUserListSortOrderModeThenLocalActivityThenNameToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to User‘s Mode, then the user&apos;s nick or display name.
        /// </summary>
        internal static string strGlobalAppearanceUserListSortOrderModeThenName {
            get {
                return ResourceManager.GetString("strGlobalAppearanceUserListSortOrderModeThenName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sorts the user list by the mode and then the user&apos;s nick or display name.
        /// </summary>
        internal static string strGlobalAppearanceUserListSortOrderModeThenNameToolTip {
            get {
                return ResourceManager.GetString("strGlobalAppearanceUserListSortOrderModeThenNameToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to User‘s nick or display name only.
        /// </summary>
        internal static string strGlobalAppearanceUserListSortOrderName {
            get {
                return ResourceManager.GetString("strGlobalAppearanceUserListSortOrderName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sorts the user list, but only by the user nick or display name.
        /// </summary>
        internal static string strGlobalAppearanceUserListSortOrderNameToolTip {
            get {
                return ResourceManager.GetString("strGlobalAppearanceUserListSortOrderNameToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unsorted.
        /// </summary>
        internal static string strGlobalAppearanceUserListSortOrderUnsorted {
            get {
                return ResourceManager.GetString("strGlobalAppearanceUserListSortOrderUnsorted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Prevents Best Chat from sorting the user list.
        /// </summary>
        internal static string strGlobalAppearanceUserListSortOrderUnsortedToolTip {
            get {
                return ResourceManager.GetString("strGlobalAppearanceUserListSortOrderUnsortedToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If you select this, colored discs will be used to indicate op/half op status and voice..
        /// </summary>
        internal static string strGlobalAppearanceUserListWaysToShowModesColoredDiscsDesc {
            get {
                return ResourceManager.GetString("strGlobalAppearanceUserListWaysToShowModesColoredDiscsDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Colored Discs.
        /// </summary>
        internal static string strGlobalAppearanceUserListWaysToShowModesColoredDiscsTitle {
            get {
                return ResourceManager.GetString("strGlobalAppearanceUserListWaysToShowModesColoredDiscsTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use these choices to control how Best Chat marks select users as special.  Unless you choose “Hidden”, Best Chat will tell you which users are ops, half ops, or have voice..
        /// </summary>
        internal static string strGlobalAppearanceUserListWaysToShowModesDesc {
            get {
                return ResourceManager.GetString("strGlobalAppearanceUserListWaysToShowModesDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select if you don&apos;t need to know who is an op, half-op, or has voice..
        /// </summary>
        internal static string strGlobalAppearanceUserListWaysToShowModesHiddenDesc {
            get {
                return ResourceManager.GetString("strGlobalAppearanceUserListWaysToShowModesHiddenDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Hidden (no modes visible).
        /// </summary>
        internal static string strGlobalAppearanceUserListWaysToShowModesHiddenTitle {
            get {
                return ResourceManager.GetString("strGlobalAppearanceUserListWaysToShowModesHiddenTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If you select this, Best Chat will show op, half op, and voice with traditional symbols..
        /// </summary>
        internal static string strGlobalAppearanceUserListWaysToShowModesSymbolsDesc {
            get {
                return ResourceManager.GetString("strGlobalAppearanceUserListWaysToShowModesSymbolsDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use symbols.
        /// </summary>
        internal static string strGlobalAppearanceUserListWaysToShowModesSymbolsTitle {
            get {
                return ResourceManager.GetString("strGlobalAppearanceUserListWaysToShowModesSymbolsTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to How should we show the user modes?.
        /// </summary>
        internal static string strGlobalAppearanceUserListWaysToShowModesTitle {
            get {
                return ResourceManager.GetString("strGlobalAppearanceUserListWaysToShowModesTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Groups tasks that Best Chat runs at select events.  These are all commands you were otherwise enter from the input box and can include those from plugins and aliases..
        /// </summary>
        internal static string strGlobalAutoPerformDesc {
            get {
                return ResourceManager.GetString("strGlobalAutoPerformDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Auto-perform.
        /// </summary>
        internal static string strGlobalAutoPerformTitle {
            get {
                return ResourceManager.GetString("strGlobalAutoPerformTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enter commands to run when joining a channel on any network.  This might be overridden by the settings for each network and further by individual channels..
        /// </summary>
        internal static string strGlobalAutoPerformWhenJoiningChanDesc {
            get {
                return ResourceManager.GetString("strGlobalAutoPerformWhenJoiningChanDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When joining a channel on any network.
        /// </summary>
        internal static string strGlobalAutoPerformWhenJoiningChanTitle {
            get {
                return ResourceManager.GetString("strGlobalAutoPerformWhenJoiningChanTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enter any commands to run when you join any network.  Thise can include commands from plugins and aliases..
        /// </summary>
        internal static string strGlobalAutoPerformWhenJoiningNetDesc {
            get {
                return ResourceManager.GetString("strGlobalAutoPerformWhenJoiningNetDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When joining a network.
        /// </summary>
        internal static string strGlobalAutoPerformWhenJoiningNetTitle {
            get {
                return ResourceManager.GetString("strGlobalAutoPerformWhenJoiningNetTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enter commands to run when opening a user chat on any network.  This might be overridden by the settings for each network..
        /// </summary>
        internal static string strGlobalAutoPerformWhenOpeningUserChatDesc {
            get {
                return ResourceManager.GetString("strGlobalAutoPerformWhenOpeningUserChatDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When opening a user chat on any network.
        /// </summary>
        internal static string strGlobalAutoPerformWhenOpeningUserChatTitle {
            get {
                return ResourceManager.GetString("strGlobalAutoPerformWhenOpeningUserChatTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enter any commands to run when Best Chat starts.  This can include plugins and aliases..
        /// </summary>
        internal static string strGlobalAutoPerformWhenStartingBestChatDesc {
            get {
                return ResourceManager.GetString("strGlobalAutoPerformWhenStartingBestChatDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When Starting Best Chat.
        /// </summary>
        internal static string strGlobalAutoPerformWhenStartingBestChatTitle {
            get {
                return ResourceManager.GetString("strGlobalAutoPerformWhenStartingBestChatTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When your connection is lost unexpectedly, Best Chat can automatically reconnect to the server for you..
        /// </summary>
        internal static string strGlobalConnAutoReconnectDesc {
            get {
                return ResourceManager.GetString("strGlobalConnAutoReconnectDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reconnect when disconnected unexpectedly.
        /// </summary>
        internal static string strGlobalConnAutoReconnectTitle {
            get {
                return ResourceManager.GetString("strGlobalConnAutoReconnectTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For multiple clients to correctly read messages with non-ASCII characters on IRC, they need to use the same character encoding..
        /// </summary>
        internal static string strGlobalConnCharEncodingDesc {
            get {
                return ResourceManager.GetString("strGlobalConnCharEncodingDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to C_haracter Encoding.
        /// </summary>
        internal static string strGlobalConnCharEncodingTitle {
            get {
                return ResourceManager.GetString("strGlobalConnCharEncodingTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies a default quit message to use when on is not explicitly specified for a network or via the /quit command..
        /// </summary>
        internal static string strGlobalConnDefQuitMsgDesc {
            get {
                return ResourceManager.GetString("strGlobalConnDefQuitMsgDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default Quit _Message.
        /// </summary>
        internal static string strGlobalConnDefQuitMsgTitle {
            get {
                return ResourceManager.GetString("strGlobalConnDefQuitMsgTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to These preferences affect how Best Chat connects to the Internet..
        /// </summary>
        internal static string strGlobalConnDesc {
            get {
                return ResourceManager.GetString("strGlobalConnDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Allows Best Chat to connect to servers that require an ident response.
        /// </summary>
        internal static string strGlobalConnEnableIdentDesc {
            get {
                return ResourceManager.GetString("strGlobalConnEnableIdentDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enable _Identification Server during connection process.
        /// </summary>
        internal static string strGlobalConnEnableIdentTitle {
            get {
                return ResourceManager.GetString("strGlobalConnEnableIdentTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This is number of times Best Chat attempts to connect to a server or network.  A value of 1 means Best Chat will never attempt to reconnect to the server..
        /// </summary>
        internal static string strGlobalConnMaxAttemptsDesc {
            get {
                return ResourceManager.GetString("strGlobalConnMaxAttemptsDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Maximum Connection _Attempts:.
        /// </summary>
        internal static string strGlobalConnMaxAttemptsTitle {
            get {
                return ResourceManager.GetString("strGlobalConnMaxAttemptsTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If this is turned on, Best Chat will try (only once) to rejoin a channel you got kicked from.  Note: Some channels dislike auto-rejoin and will ban you.  So be careful..
        /// </summary>
        internal static string strGlobalConnRejoinAfterKickDesc {
            get {
                return ResourceManager.GetString("strGlobalConnRejoinAfterKickDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to R_ejoin when kicked.
        /// </summary>
        internal static string strGlobalConnRejoinAfterKickTitle {
            get {
                return ResourceManager.GetString("strGlobalConnRejoinAfterKickTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _Connection.
        /// </summary>
        internal static string strGlobalConnTitle {
            get {
                return ResourceManager.GetString("strGlobalConnTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If checked, Best Chat will attempt to reconnect to any server forever.  If unchecked, the limit will be to the right..
        /// </summary>
        internal static string strGlobalConnUnlimitedAttemptsDesc {
            get {
                return ResourceManager.GetString("strGlobalConnUnlimitedAttemptsDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unlimited Attempts?.
        /// </summary>
        internal static string strGlobalConnUnlimitedAttemptsTitle {
            get {
                return ResourceManager.GetString("strGlobalConnUnlimitedAttemptsTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DCC lets you bypass a server once you connected in order to talk to a specific user, send them files, or receive files from them.  Use this tab to control those settings..
        /// </summary>
        internal static string strGlobalDccDesc {
            get {
                return ResourceManager.GetString("strGlobalDccDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies where to save all files received via DCC.
        /// </summary>
        internal static string strGlobalDccDownloadsFolderDesc {
            get {
                return ResourceManager.GetString("strGlobalDccDownloadsFolderDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Downloads Folder.
        /// </summary>
        internal static string strGlobalDccDownloadsFolderTitle {
            get {
                return ResourceManager.GetString("strGlobalDccDownloadsFolderTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You must check this to allow Best Chat to use DCC.  Otherwise, all DCC chats will be blocked and DCC won&apos;t appear in the menus..
        /// </summary>
        internal static string strGlobalDccEnabledDesc {
            get {
                return ResourceManager.GetString("strGlobalDccEnabledDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enabled.
        /// </summary>
        internal static string strGlobalDccEnabledTitle {
            get {
                return ResourceManager.GetString("strGlobalDccEnabledTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If checked, Best Chat will ask the server for the IP address to use..
        /// </summary>
        internal static string strGlobalDccGetIpFromServerDesc {
            get {
                return ResourceManager.GetString("strGlobalDccGetIpFromServerDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Get the local IP from the server.
        /// </summary>
        internal static string strGlobalDccGetIpFromServerTitle {
            get {
                return ResourceManager.GetString("strGlobalDccGetIpFromServerTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DCC (Direct Client Chat).
        /// </summary>
        internal static string strGlobalDccTitle {
            get {
                return ResourceManager.GetString("strGlobalDccTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to All global preferences can be found in these pages..
        /// </summary>
        internal static string strGlobalDesc {
            get {
                return ResourceManager.GetString("strGlobalDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        internal static string strGlobalPrefsPluginExtScriptsTitle {
            get {
                return ResourceManager.GetString("strGlobalPrefsPluginExtScriptsTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enter any strings you want to trigger a notify besides your nick.  This could be anything you&apos;re interested in, &quot;@op&quot;, &quot;@room&quot;, etc.  Your nick is implied.  If you turned on Agressive Notify in the application&apos;s main preferences, Best Chat will try to get your attention.
        /// </summary>
        internal static string strGlobalStalkWordsDesc {
            get {
                return ResourceManager.GetString("strGlobalStalkWordsDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Stalk Words.
        /// </summary>
        internal static string strGlobalStalkWordsTitle {
            get {
                return ResourceManager.GetString("strGlobalStalkWordsTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Global.
        /// </summary>
        internal static string strGlobalTitle {
            get {
                return ResourceManager.GetString("strGlobalTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to All IRC specific settings are here..
        /// </summary>
        internal static string strIrcRootDesc {
            get {
                return ResourceManager.GetString("strIrcRootDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to IRC.
        /// </summary>
        internal static string strIrcRootTitle {
            get {
                return ResourceManager.GetString("strIrcRootTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use if you want {0} to have a different set of aliases from what are available by default in Best Chat IRC.  This can be overridden again for each channel once you join.  Note: Having aliases that exist in some views but not others can be confusing..
        /// </summary>
        internal static string strNetAliasDesc {
            get {
                return ResourceManager.GetString("strNetAliasDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If you need more aliases than what {0} inherits from the global IRC settings, list them here..
        /// </summary>
        internal static string strNetAliasesAdditionalDesc {
            get {
                return ResourceManager.GetString("strNetAliasesAdditionalDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to List any extra aliases you want defined for use in views associated with {0}.
        /// </summary>
        internal static string strNetAliasesAdditionalTitle {
            get {
                return ResourceManager.GetString("strNetAliasesAdditionalTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} inherits a list of aliases from the global IRC settings.  You can disable any or all of them here.  You can override this for individual channels once you visit them..
        /// </summary>
        internal static string strNetAliasesInheritedDesc {
            get {
                return ResourceManager.GetString("strNetAliasesInheritedDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Which Inherited Aliases are Enabled for {0}?.
        /// </summary>
        internal static string strNetAliasesInheritedTitle {
            get {
                return ResourceManager.GetString("strNetAliasesInheritedTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Aliases that exist only for {0}.
        /// </summary>
        internal static string strNetAliasTitle {
            get {
                return ResourceManager.GetString("strNetAliasTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use to specify additional nicks you want to be available for {0}..
        /// </summary>
        internal static string strNetAltNicksAdditionalDesc {
            get {
                return ResourceManager.GetString("strNetAltNicksAdditionalDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Lists more alternate nicks specific to {0}.
        /// </summary>
        internal static string strNetAltNicksAdditionalTitle {
            get {
                return ResourceManager.GetString("strNetAltNicksAdditionalTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If you prefer {0} to use different alternate nicks than what you use for the rest of Best Chat IRC, this tab lets you do that..
        /// </summary>
        internal static string strNetAltNicksDesc {
            get {
                return ResourceManager.GetString("strNetAltNicksDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} inherits a list of alternate nicks from the global IRC settings.  You can diable any or all of them.  The entries that are enabled are tried before any entries below and in the order shown.  If you need another order, disable entries as needed and recreate them below..
        /// </summary>
        internal static string strNetAltNicksInheritedDesc {
            get {
                return ResourceManager.GetString("strNetAltNicksInheritedDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} has these alternate nicks enabled..
        /// </summary>
        internal static string strNetAltNicksInheritedTitle {
            get {
                return ResourceManager.GetString("strNetAltNicksInheritedTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Alternate nicks specific to {0}.
        /// </summary>
        internal static string strNetAltNicksTitle {
            get {
                return ResourceManager.GetString("strNetAltNicksTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use to override the global auto-perform settings for {0}.  You can disable specific entries and add new ones.  Furthermore, you can override it further for each channel once you join it..
        /// </summary>
        internal static string strNetAutoPerformDesc {
            get {
                return ResourceManager.GetString("strNetAutoPerformDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Each entry here is inherited from the global IRC preferences.  Uncheck an item to prevent that command from running when the event happens for {0}.  Leave it checked to enable it to run..
        /// </summary>
        internal static string strNetAutoPerformOnEvtDisabledStepsDesc {
            get {
                return ResourceManager.GetString("strNetAutoPerformOnEvtDisabledStepsDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Disable some steps for {0}?.
        /// </summary>
        internal static string strNetAutoPerformOnEvtDisabledStepsTitle {
            get {
                return ResourceManager.GetString("strNetAutoPerformOnEvtDisabledStepsTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} auto-perform options.
        /// </summary>
        internal static string strNetAutoPerformTitle {
            get {
                return ResourceManager.GetString("strNetAutoPerformTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use if you want a different set of commands to be run when joining any channel on {0} other than what was specified in the global IRC settings.  This list can be overriden again for individual channels once you join them..
        /// </summary>
        internal static string strNetAutoPerformWhenJoiningChanDesc {
            get {
                return ResourceManager.GetString("strNetAutoPerformWhenJoiningChanDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Commands to run when joining any channel on {0}.
        /// </summary>
        internal static string strNetAutoPerformWhenJoiningChanTitle {
            get {
                return ResourceManager.GetString("strNetAutoPerformWhenJoiningChanTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use if you want to customize the list of commands you want to run each time you connect to {0}.
        /// </summary>
        internal static string strNetAutoPerformWhenJoiningNetDesc {
            get {
                return ResourceManager.GetString("strNetAutoPerformWhenJoiningNetDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Commands to run when joining {0}.
        /// </summary>
        internal static string strNetAutoPerformWhenJoiningNetTitle {
            get {
                return ResourceManager.GetString("strNetAutoPerformWhenJoiningNetTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use if you want a different set of commands to be run when you open a chat with any other user on {0}.
        /// </summary>
        internal static string strNetAutoPerformWhenOpeningUserChatDesc {
            get {
                return ResourceManager.GetString("strNetAutoPerformWhenOpeningUserChatDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Commands to run when you open a chat window with another user.
        /// </summary>
        internal static string strNetAutoPerformWhenOpeningUserChatTitle {
            get {
                return ResourceManager.GetString("strNetAutoPerformWhenOpeningUserChatTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enter any additonal aliases you&apos;d like to be enabled when {1} on {0} is the active view.  You can&apos;t use any name if an alias with that name was inherited unless you disable it..
        /// </summary>
        internal static string strNetChanAliasesAdditionalDesc {
            get {
                return ResourceManager.GetString("strNetChanAliasesAdditionalDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Additional Aliases for {1} in the network {0}.
        /// </summary>
        internal static string strNetChanAliasesAdditionalTitle {
            get {
                return ResourceManager.GetString("strNetChanAliasesAdditionalTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The checked aliases are active in {1}.  Some were inherited from {0} while others came from your global IRC settings.  Uncheck any you don&apos;t want for {1}..
        /// </summary>
        internal static string strNetChanAliasInheritedDesc {
            get {
                return ResourceManager.GetString("strNetChanAliasInheritedDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Aliases inherited from {0} or global settings to {1}.
        /// </summary>
        internal static string strNetChanAliasInheritedTitle {
            get {
                return ResourceManager.GetString("strNetChanAliasInheritedTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to These steps will be performed after the entries above that are enabled in the order shown any time you join {1} on {1}..
        /// </summary>
        internal static string strNetChanAutoPerformAddedDesc {
            get {
                return ResourceManager.GetString("strNetChanAutoPerformAddedDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Additional steps to run when joining {1} on the network {0}.
        /// </summary>
        internal static string strNetChanAutoPerformAddedTitle {
            get {
                return ResourceManager.GetString("strNetChanAutoPerformAddedTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Go here to change what steps are run when you join {1} on {0}.  These override what you specified for the network (when joining any channel)..
        /// </summary>
        internal static string strNetChanAutoPerformDesc {
            get {
                return ResourceManager.GetString("strNetChanAutoPerformDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to These steps will be performed, if enabled, any time you join {1} on {0}.  Disable entries as needed.  If you want to change the order, disable entries and then create them below in the new order..
        /// </summary>
        internal static string strNetChanAutoPerformInheritedDesc {
            get {
                return ResourceManager.GetString("strNetChanAutoPerformInheritedDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Inherited steps to take when joining {1} on the network {0}.
        /// </summary>
        internal static string strNetChanAutoPerformInheritedTitle {
            get {
                return ResourceManager.GetString("strNetChanAutoPerformInheritedTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Override what happens when you join {1} on the network {0}.
        /// </summary>
        internal static string strNetChanAutoPerformTitle {
            get {
                return ResourceManager.GetString("strNetChanAutoPerformTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to These tabs let you override settings for {0} for {1}..
        /// </summary>
        internal static string strNetChanDesc {
            get {
                return ResourceManager.GetString("strNetChanDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This inherited {0} came from your global IRC preferences..
        /// </summary>
        internal static string strNetChanInheritedFromGlobalDesc {
            get {
                return ResourceManager.GetString("strNetChanInheritedFromGlobalDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Global Settings.
        /// </summary>
        internal static string strNetChanInheritedFromGlobalText {
            get {
                return ResourceManager.GetString("strNetChanInheritedFromGlobalText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This inherited {0} came from the network preferences for {1}..
        /// </summary>
        internal static string strNetChanInheritedFromNetDesc {
            get {
                return ResourceManager.GetString("strNetChanInheritedFromNetDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Network.
        /// </summary>
        internal static string strNetChanInheritedFromNetText {
            get {
                return ResourceManager.GetString("strNetChanInheritedFromNetText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to These words, when they appear in {1} on {0}, will trigger alerts.  These are in addition to those specified above..
        /// </summary>
        internal static string strNetChanStalkWordsAddedDesc {
            get {
                return ResourceManager.GetString("strNetChanStalkWordsAddedDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to More words to alert you when they appear in {1} on {0}.
        /// </summary>
        internal static string strNetChanStalkWordsAddedTitle {
            get {
                return ResourceManager.GetString("strNetChanStalkWordsAddedTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to These words, when they appear in {1} on {0}, will trigger alerts.  Those you specified in the global IRC settings as well as those from the network will be listed here..
        /// </summary>
        internal static string strNetChanStalkWordsInheritedDesc {
            get {
                return ResourceManager.GetString("strNetChanStalkWordsInheritedDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Stalk words inherited from {0} for {1}.
        /// </summary>
        internal static string strNetChanStalkWordsInheritedTitle {
            get {
                return ResourceManager.GetString("strNetChanStalkWordsInheritedTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Go here if you want {1} to use different time stamp settings than used by other {0} channels..
        /// </summary>
        internal static string strNetChanTimeStampDesc {
            get {
                return ResourceManager.GetString("strNetChanTimeStampDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {1} time stamp overrides on {0}.
        /// </summary>
        internal static string strNetChanTimeStampTitle {
            get {
                return ResourceManager.GetString("strNetChanTimeStampTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {1} channel preferences on {0}.
        /// </summary>
        internal static string strNetChanTitle {
            get {
                return ResourceManager.GetString("strNetChanTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use to override the connection settings for {0}.  This can be useful if a network needs different settings..
        /// </summary>
        internal static string strNetConnDesc {
            get {
                return ResourceManager.GetString("strNetConnDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Check to customize the connection settings to be more specific to {0}..
        /// </summary>
        internal static string strNetConnOverrideDesc {
            get {
                return ResourceManager.GetString("strNetConnOverrideDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Override the global connection settings for {0}.
        /// </summary>
        internal static string strNetConnOverrideTitle {
            get {
                return ResourceManager.GetString("strNetConnOverrideTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Connection settings specific to {0}.
        /// </summary>
        internal static string strNetConnTitle {
            get {
                return ResourceManager.GetString("strNetConnTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Check to override any of the global settings within the settings for {0}..
        /// </summary>
        internal static string strNetDccOverrideDesc {
            get {
                return ResourceManager.GetString("strNetDccOverrideDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Override the global DCC settings for {0}.
        /// </summary>
        internal static string strNetDccOverrideTitle {
            get {
                return ResourceManager.GetString("strNetDccOverrideTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Lists preferences specific to the network {0}.
        /// </summary>
        internal static string strNetDesc {
            get {
                return ResourceManager.GetString("strNetDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This is a list of known channels on {0}.  You&apos;ve previously joined each of these channels.  Each channel has preferences associated with it..
        /// </summary>
        internal static string strNetKnownChanDesc {
            get {
                return ResourceManager.GetString("strNetKnownChanDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Known channels on {0}.
        /// </summary>
        internal static string strNetKnownChanTitle {
            get {
                return ResourceManager.GetString("strNetKnownChanTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If you want to know when other specific users come and go on {0}, add their nick here.  You can manually do this from the command line with /notify.
        /// </summary>
        internal static string strNetNotifyDesc {
            get {
                return ResourceManager.GetString("strNetNotifyDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Nicks of remote users you want to know when they are on {0}.
        /// </summary>
        internal static string strNetNotifyTitle {
            get {
                return ResourceManager.GetString("strNetNotifyTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If any of these users leave the network {0}, join it, become away on {0}, or not away on {0}; Best Chat will notify you..
        /// </summary>
        internal static string strNetNotifyWhenOnlineDesc {
            get {
                return ResourceManager.GetString("strNetNotifyWhenOnlineDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Notify for {0}.
        /// </summary>
        internal static string strNetNotifyWhenOnlineTitle {
            get {
                return ResourceManager.GetString("strNetNotifyWhenOnlineTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use to specify additonal words you want to be alerted about when they happen in any view associated with {0}..
        /// </summary>
        internal static string strNetStalkWordsAdditionalDesc {
            get {
                return ResourceManager.GetString("strNetStalkWordsAdditionalDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Lists more stalk words specific to {0}.
        /// </summary>
        internal static string strNetStalkWordsAdditionalTitle {
            get {
                return ResourceManager.GetString("strNetStalkWordsAdditionalTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This tab lets you override the stalk words for {0} from the default IRC global stalk words..
        /// </summary>
        internal static string strNetStalkWordsDesc {
            get {
                return ResourceManager.GetString("strNetStalkWordsDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to more, once you join a channel, you can again override them..
        /// </summary>
        internal static string strNetStalkWordsInheritedDesc {
            get {
                return ResourceManager.GetString("strNetStalkWordsInheritedDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} has these stalk words from global IRC settings enabled.
        /// </summary>
        internal static string strNetStalkWordsInheritedTitle {
            get {
                return ResourceManager.GetString("strNetStalkWordsInheritedTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Override the stalk words for {0}.
        /// </summary>
        internal static string strNetStalkWordsTitle {
            get {
                return ResourceManager.GetString("strNetStalkWordsTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Check to override any of the global settings within the settings for {0}..
        /// </summary>
        internal static string strNetTimeStampOverrideNetDesc {
            get {
                return ResourceManager.GetString("strNetTimeStampOverrideNetDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Override the global time stamp settings for {0}.
        /// </summary>
        internal static string strNetTimeStampOverrideNetTitle {
            get {
                return ResourceManager.GetString("strNetTimeStampOverrideNetTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} network preferences.
        /// </summary>
        internal static string strNetTitle {
            get {
                return ResourceManager.GetString("strNetTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to New protocol detected!.
        /// </summary>
        internal static string strPermNeededToEnableProtocolCaption {
            get {
                return ResourceManager.GetString("strPermNeededToEnableProtocolCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A new protocol called {0} published by {1} has been installed.  The publisher&apos;s description:\r\n\r\n&quot;{2}&quot;\r\n\r\nDo you wish to enable it?  A faulty module could cause Best Chat to become unstable.  Modules could also be used to attack your system.  Be sure you have a trusted source..
        /// </summary>
        internal static string strPermNeededToEnableProtocolQuestion {
            get {
                return ResourceManager.GetString("strPermNeededToEnableProtocolQuestion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No.
        /// </summary>
        internal static string strQuestionNo {
            get {
                return ResourceManager.GetString("strQuestionNo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Yes.
        /// </summary>
        internal static string strQuestionYes {
            get {
                return ResourceManager.GetString("strQuestionYes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Click to show extended help for this preference.  Click again to hide that help..
        /// </summary>
        internal static string strShowHelpButtonToolTipText {
            get {
                return ResourceManager.GetString("strShowHelpButtonToolTipText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to stalk word.
        /// </summary>
        internal static string strStalkWordsText {
            get {
                return ResourceManager.GetString("strStalkWordsText", resourceCulture);
            }
        }
    }
}
